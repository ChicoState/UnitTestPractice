        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:
        -:    4:using std::string;
        -:    5:
        -:    6:/*
        -:    7:  The function receives a string counts how many times the same character 
        -:    8:  occurs at the beginning of the string, before any other characters (or the
        -:    9:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   10:  'z' and any ASCII characters are allowed.
        -:   11:*/
       12:   12:int Password::count_leading_characters(string phrase){
       12:   13:  int repetition = 1;
       12:   14:  int index = 0;
        -:   15:
       12:   16:  if(phrase.length() == 0)
        -:   17:  {
        2:   18:	return 0;
        -:   19:  }
       30:   20:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
       20:   21:    repetition++;
       20:   22:    index++;
        -:   23:  }
       10:   24:  return repetition;
        -:   25:}
        -:   26:
        -:   27:/*
        -:   28:bool Password::has_mixed_case(string phrase)
        -:   29:{
        -:   30:	int lower = 0;
        -:   31:	int upper = 0;
        -:   32:	int index = 0;
        -:   33:	
        -:   34:	while(index < phrase.length())
        -:   35:	{
        -:   36:		if(isupper(phrase[index]))
        -:   37:		{
        -:   38:			upper = 1;
        -:   39:		}
        -:   40:		else
        -:   41:		{
        -:   42:			lower = 1;
        -:   43:		}
        -:   44:		index ++;
        -:   45:	}
        -:   46:
        -:   47:	return (upper && lower);
        -:   48:
        -:   49:	
        -:   50:}*/
        -:   51:/*
        -:   52:bool Password::has_mixed_case(string phrase){ bool upper = false; bool lower = false; for(auto &c : phrase){ if(upper && lower){ return true; } if(isupper(c)){ upper = true; } else if(islower(c)){ lower = true; } } return false; }
        -:   53:*/
        -:   54:/*
        -:   55:bool Password::has_mixed_case(string password){ int length = password.length(); string upper=password, lower=password; for(int i=0; i < password.length(); i++){ upper[i] = toupper(password[i]); lower[i] = tolower(password[i]); } return password != upper && password != lower; }*/
        -:   56:/*
        -:   57:bool Password::has_mixed_case(string phrase){ bool upper = false, lower = false; for(char a : phrase){ isupper(a) ? upper = true : islower(a) ? lower = true : lower = false; } return upper || lower ? true : false; }*/
        -:   58:
       11:   59:bool Password::has_mixed_case(string phrase) { 
       11:   60:	bool upper = false; 
       11:   61:	bool lower = false; 
       11:   62:	if (phrase.length() < 1 || phrase.length() == 0) { 
        1:   63:		return false; 
        -:   64:	} 
       40:   65:	for (int i = 0; i < phrase.length(); i++) { 
       31:   66:		if (isupper(phrase[i])) { 
       19:   67:			upper = true; 
        -:   68:		} 
       31:   69:		if (islower(phrase[i])) { 
        7:   70:			lower = true; 
        -:   71:		} 
       31:   72:		if (phrase[i] == ' ') { 
        1:   73:			return false; 
        -:   74:		} 
        -:   75:	} 
        9:   76:	if (lower && upper) { 
        3:   77:		return true; 
        -:   78:	} 
        6:   79:	return false; 
        -:   80:}
        -:   81:/*
        -:   82:bool Password::has_mixed_case(string phrase) { if(phrase[0] == phrase[1]) { return false; } else if(isupper(phrase[0]) != islower(phrase[1])) { return true; } else if(islower(phrase[0]) != isupper(phrase[1])) { return true; } else { return false; } }
        -:   83:*/
